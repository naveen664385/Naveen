//@version=5
strategy("BCandle SR Breach", overlay=true,max_lines_count  = 500)

bodyPercent = input.float(75, "BCandle Percent(%)")*0.01
srLength=input.int(3,"Support Resistance Length")

bCandle = math.abs(close-open)/(high-low) > bodyPercent and math.abs(close-open) > math.abs(close[1]-open[1]) and math.abs(close-open) > math.abs(close[2]-open[2]) and math.abs(close-open) > math.abs(close[3]-open[3])



coh=close>open?close:open
col=close<open?close:open
draw_lines(i)=>
    highh=ta.pivothigh(coh, srLength, srLength)
    lowl=ta.pivotlow(col, srLength, srLength)
    var hi=0.0
    var lo=0.0
    
    if na(highh)
        hi:=hi[1]
    else
        hi:=highh
    
    if na(lowl)
        lo:=lo[1]
    else
        lo:=lowl
    
    if (close[i+1]>hi or open[i+1]>hi)
        hi:=na
    if (close[i+1]<lo or open[i+1]<lo)
        lo:=na
    
    
    //plot(hi==hi[1]?hi:na,offset = -i-1,color=color.red,style=plot.style_linebr)
    //plot(lo==lo[1]?lo:na,offset = -i-1,color=color.red,style=plot.style_linebr)

    //bgcolor(bCandle?color.new(color.white,90):na)

    longCondition= bCandle and close > hi and barstate.isconfirmed and strategy.position_size<=0
    shortCondition = bCandle and close < lo and barstate.isconfirmed and strategy.position_size>=0

    var longstop=0.0
    var shortstop=0.0
    
    if longCondition
        strategy.entry("long",strategy.long)
        longstop:=low
    if close>shortstop and not shortCondition and not longCondition
        strategy.close("short",comment = "shortstop")
    if shortCondition
        strategy.entry("short",strategy.short)
        shortstop:=high
    if close<longstop and not shortCondition and not longCondition
        strategy.close("long",comment="longstop")
draw_lines(10)
draw_lines(9)
draw_lines(8)
draw_lines(7)
draw_lines(6)
draw_lines(5)
draw_lines(4)
draw_lines(3)
draw_lines(2)
draw_lines(1)
#import mibian
c=mibian.BS([18484,18500,6.5,7],callPrice= 129)
print(c.impliedVolatility)
p = mibian.BS([18484, 18500, 6.5,7], putPrice= 87)
print(p.impliedVolatility)

df.groupby(df['dv'].shift(fill_value=0).cumsum())['volume'].cumsum().to_frame().rename(columns={'volume':'cumul_sum'})
